package swax.web.controller.user;
import java.util.ArrayList;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.servlet.ModelAndView;import swax.web.component.sessionscope.PerfectMatchesMap;import swax.web.component.sessionscope.PossibleSwaps;import swax.web.component.sessionscope.SessionUser;import swax.web.form.PojoModelLoginForm;import swax.web.form.PojoModelSelectSwapsForm;import swax.webservice.dto.PossibleSwapDTO;import swax.webservice.entity.album.SwapAlbum;import swax.webservice.entity.user.User;import swax.webservice.service.album.ISwapAlbumService;import swax.webservice.service.user.IUserService;/** *  * @author Matthieu Ibarra * */
@Controllerpublic class WantlistController {		@Autowired	private ISwapAlbumService swapAlbumService;		@Autowired	private IUserService userService;		@Autowired	private PossibleSwaps possibleSwapsSession;		@Autowired	private PerfectMatchesMap perfectMatchesMapSession;		@Autowired	private SessionUser sessionUser;		private Logger logger = Logger.getLogger(this.getClass());		@RequestMapping(value="/seePossibleSwapsWith", method = RequestMethod.GET)	public ModelAndView seePossibleSwapsWith(@RequestParam(value="userId") final int userId,			HttpServletRequest request, ModelAndView mav) {				logger.debug(this.getClass().getName()+": seePossibleSwapsWith");				User userConnected = sessionUser.getSessionUser();		User userToSwapWith = userService.findByUserId(userId);				// Controls if user is still connected				try {			int userConnectedId = userConnected.getUserId();			logger.debug("TEST IF USER CONNECTED: "+userConnectedId);		} catch (Exception e) {			logger.warn(this.getClass().getName()+": User has been disconnected");			String errorMsg = "Your session has expired. Please log in again.";			PojoModelLoginForm loginForm = new PojoModelLoginForm();			loginForm.setErrorMsg(errorMsg);			mav.getModel().put("loginModelAttribute", loginForm);			mav.setViewName("login/login");			e.printStackTrace();			return mav;					}				// Get the list of the albums userConnected WANTS - userToSwapWith HAS				List<PossibleSwapDTO> possibleSwapsDTO = possibleSwapsSession.getPossibleSwaps();		List<SwapAlbum> albumsUserConnectedWants = new ArrayList<SwapAlbum>();		for (PossibleSwapDTO possibleSwapDTO: possibleSwapsDTO) {			if (possibleSwapDTO.getUserId()==userToSwapWith.getUserId()) {				SwapAlbum swapAlbum = swapAlbumService.findBySwapAlbumId(possibleSwapDTO.getSwapAlbumId());				albumsUserConnectedWants.add(swapAlbum);			}		}				// Get the list of the albums userToSwapWith WANTS - userConnected HAS				Map<Integer, List<SwapAlbum>> perfectMatchesMap = perfectMatchesMapSession.getPerfectMatchesMap();		List<SwapAlbum> albumsUserToSwapWithWants = perfectMatchesMap.get(userToSwapWith.getUserId());				mav.getModel().put("albumsUserConnectedWants", albumsUserConnectedWants);		mav.getModel().put("albumsUserToSwapWithWants", albumsUserToSwapWithWants);		mav.getModel().put("userToSwapWith", userToSwapWith);		mav.getModel().put("selectSwapsModelAttribute", new PojoModelSelectSwapsForm());		mav.getModel().put("user", sessionUser.getSessionUser());		mav.setViewName("swaps/seePossibleSwapsWith");						return mav;	}	
}