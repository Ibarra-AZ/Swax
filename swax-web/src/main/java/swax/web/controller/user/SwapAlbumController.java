package swax.web.controller.user;
import java.util.ArrayList;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.servlet.ModelAndView;import swax.webservice.dto.PossibleSwapDTO;import swax.webservice.entity.album.SwapAlbum;import swax.webservice.entity.user.User;import swax.webservice.service.album.ISwapAlbumService;import swax.webservice.service.user.IUserService;
@Controllerpublic class SwapAlbumController {
	@Autowired	private IUserService userService;		@Autowired	private ISwapAlbumService swapAlbumService;		@RequestMapping(value="/seePossibleSwapsWith", method = RequestMethod.GET)	public ModelAndView saveAndSwapAlbum(@RequestParam(value="userId") final int userId,			HttpServletRequest request, ModelAndView mav) {				User userConnected = (User) request.getSession().getAttribute("user");		User userToSwapWith = userService.findByUserId(userId);				Map<String, Object> mapInitUser = userService.initUser(userConnected);				// Get the list of the albums userConnected WANTS - userToSwapWith HAS		@SuppressWarnings("unchecked")		List<PossibleSwapDTO> possibleSwapsDTO = (List<PossibleSwapDTO>) mapInitUser.get("possibleSwaps");		List<SwapAlbum> albumsUserConnectedWants = new ArrayList<SwapAlbum>();		for (PossibleSwapDTO possibleSwapDTO: possibleSwapsDTO) {			if (possibleSwapDTO.getUserId()==userToSwapWith.getUserId()) {				SwapAlbum swapAlbum = swapAlbumService.findBySwapAlbumId(possibleSwapDTO.getSwapAlbumId());				albumsUserConnectedWants.add(swapAlbum);			}		}				// Get the list of the albums userToSwapWith WANTS - userConnected HAS		@SuppressWarnings("unchecked")		Map<User, List<SwapAlbum>> perfectMatchesMap = (Map<User, List<SwapAlbum>>) mapInitUser.get("perfectMatchesMap");		List<SwapAlbum> albumsUserToSwapWithWants = perfectMatchesMap.get(userToSwapWith);				mav.getModel().put("albumsUserConnectedWants", albumsUserConnectedWants);		mav.getModel().put("albumsUserToSwapWithWants", albumsUserToSwapWithWants);		mav.getModel().put("userToSwapWith", userToSwapWith);		mav.setViewName("swaps/seePossibleSwapsWith");						return mav;	}	
}