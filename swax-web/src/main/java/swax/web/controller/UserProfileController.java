package swax.web.controller;
import java.util.List;import javax.servlet.http.HttpServletRequest;import javax.validation.Valid;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.ModelAndView;import swax.web.form.PojoModelImportCollectionForm;import swax.web.form.PojoModelRegisterForm;import swax.webservice.dto.AlbumDTO;import swax.webservice.entity.User;import swax.webservice.service.IUserService;
@Controllerpublic class UserProfileController {
	@Autowired	private IUserService userService = null;
	@RequestMapping(value="/loadUserProfilePage", method = RequestMethod.GET)	public ModelAndView changeUserProfile(@Valid @ModelAttribute(value="registerModelAttribute") 		final PojoModelRegisterForm registerForm, 		final BindingResult pBindingResult, HttpServletRequest request, final ModelMap pModel) {				ModelAndView mav = new ModelAndView();		User user = (User) request.getSession().getAttribute("user");				registerForm.setEmail(user.getEmail());		registerForm.setUserName(user.getUserName());		registerForm.setCountry(user.getCountry());				mav.getModel().put("registerModelAttribute", registerForm);		mav.setViewName("user/changeProfile");				return mav;	}		@RequestMapping(value="/changeProfileAction", method = RequestMethod.POST)	public ModelAndView changeProfileAction(@Valid @ModelAttribute(value="registerModelAttribute") 		final PojoModelRegisterForm registerForm, 		final BindingResult pBindingResult, HttpServletRequest request, final ModelAndView mav) {				User user = (User) request.getSession().getAttribute("user");				user.setUserName(registerForm.getUserName());		user.setEmail(registerForm.getEmail());		user.setPassword(registerForm.getPassword());		user.setCountry(registerForm.getCountry());				userService.createUpdateEntity(user);				request.getSession().setAttribute("user", user);				List<AlbumDTO> albumsDTO = user.getAlbumsDTO();        mav.getModel().put("user", user);		mav.getModel().put("userCollection", albumsDTO);		mav.getModel().put("registerModelAttribute", registerForm);		mav.setViewName("mySwax");				return mav;	}		@RequestMapping(value="/backToMySwax")	public ModelAndView backToMySwax(HttpServletRequest request, final ModelAndView mav) {		User user = (User) request.getSession().getAttribute("user");		List<AlbumDTO> albumsDTO = user.getAlbumsDTO();        mav.getModel().put("user", user);		mav.getModel().put("userCollection", albumsDTO);		mav.setViewName("mySwax");		return mav;	}		@RequestMapping(value="/importDiscogsCollection")	public ModelAndView importDicogsCollection(@ModelAttribute(value="importCollectionModelAttribute") 			final PojoModelImportCollectionForm importCollectionForm, HttpServletRequest request, 			final ModelAndView mav) {				boolean hasCollection = true;//		TODO Import Discogs Collection for User//		String discogsUrl = importCollectionForm.getDiscogsURL();				User user = (User) request.getSession().getAttribute("user");		List<AlbumDTO> albumsDTO = user.getAlbumsDTO();		if (albumsDTO.size()==0) {			hasCollection = false;		}		mav.getModel().put("userCollection", albumsDTO);		mav.getModel().put("hasCollection", hasCollection);		mav.setViewName("mySwax");		return mav;	}
}