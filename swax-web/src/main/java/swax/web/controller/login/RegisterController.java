package swax.web.controller.login;
import java.util.Date;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.validation.Valid;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.ModelAndView;import swax.web.form.PojoModelImportCollectionForm;import swax.web.form.PojoModelImportWantlistForm;import swax.web.form.PojoModelRegisterForm;import swax.webservice.entity.user.User;import swax.webservice.entity.user.UserStatusEnum;import swax.webservice.service.user.IUserService;import swax.webservice.tools.DateUtils;
@Controllerpublic class RegisterController {
	@Autowired	private IUserService userService = null;		@RequestMapping(value="/register")	public ModelAndView loadRegisterPage(ModelAndView mav, PojoModelRegisterForm registerForm) {		mav.getModel().put("registerModelAttribute", registerForm);		mav.setViewName("login/register");		return mav;	}
	@RequestMapping(value="/registerAction", method = RequestMethod.POST)	public ModelAndView registerUser(@Valid @ModelAttribute(value="registerModelAttribute" ) final PojoModelRegisterForm registerForm,             final BindingResult pBindingResult, HttpServletRequest request, final ModelMap pModel) {				String errorMsg = "";		User user;		ModelAndView mav = new ModelAndView();		boolean exception = false;			try {			user = this.userService.findByEmailOrUserName(registerForm.getEmail(), registerForm.getUserName());		} catch (Exception e) {			// The request returns more than one user			user = null;			exception = true;			errorMsg="This User Name or this Email is already used in Swax.";			registerForm.setEmail("");			registerForm.setUserName("");			mav.setViewName("login/register");		}				if (user != null) {			if (user.getEmail().equals(registerForm.getEmail())) {				errorMsg = "A user with the same Email adress has already registered to Swax.";				registerForm.setEmail("");							}			if (user.getUserName().equals(registerForm.getUserName())) {				errorMsg = errorMsg + "\n" + "A user with the same User Name has already registered to Swax.";				registerForm.setUserName("");			}						mav.setViewName("login/register");		} else if (exception==false) {			user = new User(registerForm.getEmail(), registerForm.getPassword(), registerForm.getUserName(), 					registerForm.getDiscogsName(), registerForm.getCountry(), DateUtils.dateToString(new Date()), 					DateUtils.dateToString(new Date()), UserStatusEnum.Authorized.toString());						userService.createUpdateEntity(user);			mav.getModel().put("user", user);			return mav = mySwax(user);		}				registerForm.setErrorMsg(errorMsg);		mav.getModel().put("registerModelAttribute", registerForm);		request.getSession().setAttribute("user", user);		return mav;	}		private ModelAndView mySwax(User user) {				ModelAndView mav = new ModelAndView();		Map<String, Object> mapInitUser = userService.initUser(user);				mav.getModel().put("hasCollection", mapInitUser.get("hasCollection"));		mav.getModel().put("userCollection", mapInitUser.get("userCollection"));		mav.getModel().put("hasWantlist", mapInitUser.get("hasWantlist"));		mav.getModel().put("userWantlist", mapInitUser.get("userWantlist"));		mav.getModel().put("latestAdditions", mapInitUser.get("latestAdditions"));		if (!(boolean) mapInitUser.get("hasCollection")) {			mav.getModel().put("importCollectionModelAttribute", new PojoModelImportCollectionForm());		}		if (!(boolean) mapInitUser.get("hasWantlist")) {			mav.getModel().put("importWantlistModelAttribute", new PojoModelImportWantlistForm());				}				mav.setViewName("user/mySwax");				return mav;			}
}