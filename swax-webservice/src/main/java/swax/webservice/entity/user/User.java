package swax.webservice.entity.user;
import static javax.persistence.GenerationType.IDENTITY;import java.io.Serializable;import java.util.ArrayList;import java.util.List;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.GeneratedValue;import javax.persistence.Id;import javax.persistence.OneToMany;import javax.persistence.Table;import swax.webservice.dto.AlbumDTO;import swax.webservice.dto.AlbumWantlistDTO;import swax.webservice.dto.PossibleSwapDTO;import swax.webservice.entity.album.Album;import swax.webservice.entity.album.AlbumCollected;import swax.webservice.entity.album.AlbumWantlist;import swax.webservice.entity.album.SwapAlbum;
@Entity@Table(name="USER")public class User implements Serializable {
	private static final long serialVersionUID = -7198215437040727852L;
	@Id	@GeneratedValue(strategy = IDENTITY)	@Column(name="USER_ID", unique = true, nullable = false)	private Integer userId;
	@Column(name="EMAIL", unique = true, nullable = false)	private String email;
	@Column(name="PASSWORD", unique = true, nullable = false)	private String password;
	@Column(name="USER_NAME", unique = true, nullable = false)	private String userName;		@Column(name="DISCOGS_NAME", unique = true, nullable = true)	private String discogsName;
	@Column(name="COUNTRY", unique = true, nullable = false)	private String country;	@OneToMany(targetEntity=AlbumCollected.class, mappedBy="user", fetch = FetchType.LAZY)	private List<AlbumCollected> collection;		@OneToMany(targetEntity=AlbumWantlist.class, mappedBy="user", fetch = FetchType.LAZY)	private List<AlbumWantlist> wantlist;		@Column(name="DATE_SIGNUP", nullable = false)	private	String dateSignUp;		@Column(name="LAST_CONNEXION", nullable = false)	private String lastConnexion;		@Column(name="STATUS", nullable = false)	private String status;	/**	 * CONSTRUCTORS	 */
	public User() {	}	public User(String email, String password, String userName, String discogsName, String country,			String dateSignUp, String lastConnexion, String status) {		super();		this.email = email;		this.password = password;		this.userName = userName;		this.discogsName = discogsName;		this.country = country;		this.dateSignUp = dateSignUp;		this.lastConnexion = lastConnexion;		this.status = status;	}	/**	 * GETTERS & SETTERS	 */
	public Integer getUserId() {		return userId;	}	public void setUserId(Integer userId) {		this.userId = userId;	}	public String getEmail() {		return email;	}	public void setEmail(String email) {		this.email = email;	}	public String getPassword() {		return password;	}	public void setPassword(String password) {		this.password = password;	}	public String getUserName() {		return userName;	}	public void setUserName(String userName) {		this.userName = userName;	}	public String getDiscogsName() {		return discogsName;	}	public void setDiscogsName(String discogsName) {		this.discogsName = discogsName;	}	public String getCountry() {		return country;	}	public void setCountry(String country) {		this.country = country;	}	public List<AlbumCollected> getCollection() {		return collection;	}	public void setCollection(List<AlbumCollected> collection) {		this.collection = collection;	}		public List<AlbumWantlist> getWantlist() {		return wantlist;	}	public void setWantlist(List<AlbumWantlist> wantlist) {		this.wantlist = wantlist;	}	public String getDateSignUp() {		return dateSignUp;	}	public void setDateSignUp(String dateDateSignUp) {		this.dateSignUp = dateDateSignUp;	}	public String getLastConnexion() {		return lastConnexion;	}	public void setLastConnexion(String lastConnexion) {		this.lastConnexion = lastConnexion;	}	public String getStatus() {		return status;	}	public void setStatus(String status) {		this.status = status;	}	/** METHODS **/	public List<AlbumDTO> getAlbumsDTO() {		List<AlbumDTO> albumsDTO = new ArrayList<AlbumDTO>();		for (AlbumCollected albumCollected: this.collection) {			AlbumDTO albumDTO = new AlbumDTO(albumCollected.getAlbumCollectedId(), albumCollected.getAlbum().getAlbumName(),					albumCollected.getAlbum().getArtist(), albumCollected.getAlbum().getLabel(), albumCollected.getAlbum().getCatalogNumber(), 					albumCollected.getAlbum().getFormat(), albumCollected.getMediaGrading(), 					albumCollected.getSleeveGrading(), albumCollected.getNotes(), 					albumCollected.getAlbum().getReleaseDate(), albumCollected.getDateAdded(),					albumCollected.getAlbum().getDiscogsId());			albumsDTO.add(albumDTO);		}		return albumsDTO;	}	//	public List<AlbumDTO> getAlbumsWantlistDTO() {//		List<AlbumDTO> albumsDTO = new ArrayList<AlbumDTO>();//		for (AlbumWantlist albumWantlist: this.wantlist) {//			AlbumDTO albumDTO = new AlbumDTO(albumWantlist.getAlbumWantlistId(), //					albumWantlist.getAlbum().getAlbumName(), albumWantlist.getAlbum().getArtist(), //					albumWantlist.getAlbum().getLabel(), albumWantlist.getAlbum().getCatalogNumber(), //					albumWantlist.getAlbum().getFormat(), albumWantlist.getNotes(), //					albumWantlist.getAlbum().getReleaseDate(), albumWantlist.getDateAdded(),//					albumWantlist.getAlbum().getDiscogsId());//			albumsDTO.add(albumDTO);//		}//		return albumsDTO;//	}	}