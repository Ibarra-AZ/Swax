package swax.webservice.entity.user;
import static javax.persistence.GenerationType.IDENTITY;import java.io.Serializable;import java.util.ArrayList;import java.util.List;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.GeneratedValue;import javax.persistence.Id;import javax.persistence.OneToMany;import javax.persistence.Table;import lombok.Data;import swax.webservice.dto.AlbumDTO;import swax.webservice.entity.album.AlbumCollected;import swax.webservice.entity.album.AlbumWantlist;
@Entity@Table(name="USERS")@Datapublic class User implements Serializable {
	private static final long serialVersionUID = -7198215437040727852L;
	@Id	@GeneratedValue(strategy = IDENTITY)	@Column(name="USER_ID", unique = true, nullable = false)	private Integer userId;
	@Column(name="EMAIL", unique = true, nullable = false)	private String email;
	@Column(name="PASSWORD", unique = false, nullable = false)	private String password;
	@Column(name="USER_NAME", unique = true, nullable = false)	private String userName;		@Column(name="DISCOGS_NAME", unique = true, nullable = true)	private String discogsName;
	@Column(name="COUNTRY", unique = false, nullable = false)	private String country;	@OneToMany(targetEntity=AlbumCollected.class, mappedBy="user", fetch = FetchType.LAZY)	private List<AlbumCollected> collection;		@OneToMany(targetEntity=AlbumWantlist.class, mappedBy="user", fetch = FetchType.LAZY)	private List<AlbumWantlist> wantlist;		@OneToMany(targetEntity=Notification.class, mappedBy="user", fetch = FetchType.LAZY)	private List<Notification> notifications;		@Column(name="DATE_SIGNUP", nullable = false)	private	String dateSignUp;		@Column(name="LAST_CONNEXION", nullable = false)	private String lastConnexion;		@Column(name="STATUS", nullable = false)	private String status;	/**	 * CONSTRUCTORS	 */
	public User() {	}	public User(String email, String password, String userName, String discogsName, String country,			String dateSignUp, String lastConnexion, String status) {		super();		this.email = email;		this.password = password;		this.userName = userName;		this.discogsName = discogsName;		this.country = country;		this.dateSignUp = dateSignUp;		this.lastConnexion = lastConnexion;		this.status = status;	}	/** METHODS **/	public List<AlbumDTO> getAlbumsDTO() {		List<AlbumDTO> albumsDTO = new ArrayList<AlbumDTO>();		for (AlbumCollected albumCollected: this.collection) {			AlbumDTO albumDTO = new AlbumDTO(albumCollected.getAlbumCollectedId(), albumCollected.getAlbum().getAlbumName(),					albumCollected.getAlbum().getArtist(), albumCollected.getAlbum().getLabel(), albumCollected.getAlbum().getCatalogNumber(), 					albumCollected.getAlbum().getFormat(), albumCollected.getMediaGrading(), 					albumCollected.getSleeveGrading(), albumCollected.getNotes(), 					albumCollected.getAlbum().getReleaseDate(), albumCollected.getDateAdded(),					albumCollected.getAlbum().getDiscogsId());			albumsDTO.add(albumDTO);		}		return albumsDTO;	}}