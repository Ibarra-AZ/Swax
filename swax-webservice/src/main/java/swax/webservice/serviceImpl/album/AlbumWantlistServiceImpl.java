package swax.webservice.serviceImpl.album;
import java.util.ArrayList;import java.util.List;import javax.annotation.Resource;import org.springframework.stereotype.Service;import swax.webservice.dao.album.IAlbumWantlistDAO;import swax.webservice.dao.album.ISwapAlbumDAO;import swax.webservice.dto.AlbumWantlistDTO;import swax.webservice.dto.PossibleSwapDTO;import swax.webservice.entity.album.Album;import swax.webservice.entity.album.AlbumDiscogsWantlist;import swax.webservice.entity.album.AlbumWantlist;import swax.webservice.entity.album.SwapAlbum;import swax.webservice.entity.user.User;import swax.webservice.service.album.IAlbumWantlistService;/** *  * @author Matthieu Ibarra	 * */
@Service("albumWantlistService")public class AlbumWantlistServiceImpl implements IAlbumWantlistService {
	@Resource(name = "albumWantlistDAO")	private IAlbumWantlistDAO albumWantlistDAO = null;		@Resource(name = "swapAlbumDAO")	private ISwapAlbumDAO swapAlbumService = null;
	@Override	public List<AlbumWantlist> findAll() {		return this.albumWantlistDAO.findAll();	}
	@Override	public Integer createUpdateEntity(AlbumWantlist albumWantlist) {		return this.albumWantlistDAO.saveAndFlush(albumWantlist).getAlbumWantlistId();	}		@Override	public void createUserWantlist(User user, List<AlbumDiscogsWantlist> albumsDiscogsWantlist) {		for (AlbumDiscogsWantlist albumDiscogsWantlist: albumsDiscogsWantlist) {			AlbumWantlist albumWantlist = new AlbumWantlist(user, albumDiscogsWantlist);			this.albumWantlistDAO.save(albumWantlist).getAlbumWantlistId();		}		this.albumWantlistDAO.flush();	}	@Override	public List<AlbumWantlist> findByUser(User user) {		return this.albumWantlistDAO.findByUser(user);	}		/**	 * Gets the DTO for the albums in the user's wantlist and 	 * sets a list of possible swaps for every album if there are any	 * @param user	 * @param possibleSwaps	 * @return list of AlbumWantListDTO	 */	@Override	public List<AlbumWantlistDTO> getAlbumsWantlistDTO(User user, List<PossibleSwapDTO> possibleSwaps) {		List<AlbumWantlistDTO> albumsWantlistDTO = new ArrayList<AlbumWantlistDTO>();		for (AlbumWantlist albumWantlist: user.getWantlist()) {			Album album = albumWantlist.getAlbum();			AlbumWantlistDTO albumWantlistDTO = new AlbumWantlistDTO(albumWantlist.getAlbumWantlistId(),album.getAlbumName(),					album.getArtist(), album.getLabel(), album.getCatalogNumber(), album.getFormat(), albumWantlist.getNotes(),					album.getReleaseDate(), albumWantlist.getDateAdded(), album.getDiscogsId(), new ArrayList<SwapAlbum>());			albumsWantlistDTO.add(albumWantlistDTO);		}		if (possibleSwaps.size() != 0 || possibleSwaps != null) {			for (PossibleSwapDTO possibleSwap: possibleSwaps) {				for (AlbumWantlistDTO albumWantlistDTO: albumsWantlistDTO) {					if (albumWantlistDTO.getAlbumId() == possibleSwap.getAlbumWantlistId()) {						List<SwapAlbum> possibleSwapList = albumWantlistDTO.getPossibleSwaps();						SwapAlbum swapAlbum = swapAlbumService.findBySwapAlbumId(possibleSwap.getSwapAlbumId());						possibleSwapList.add(swapAlbum);						albumWantlistDTO.setPossibleSwaps(possibleSwapList);					}				}			}		}				return albumsWantlistDTO;	}}